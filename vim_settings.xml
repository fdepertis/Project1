<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/tree/tree.py" timestamp="1538903064336">
        <mark key="[" line="115" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/tree/linked_binary_tree.py" timestamp="1539097766263">
        <mark key="[" line="35" column="24" />
        <mark key="]" line="110" column="30" />
        <mark key="^" line="110" column="30" />
        <mark key="." line="110" column="30" />
      </file>
      <file name="/Dummy.txt" timestamp="1539242749885">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/tdp_test/ese_tree_binarySearchTree.py" timestamp="1539071102893">
        <mark key="'" line="12" column="91" />
        <mark key="[" line="184" column="0" />
        <mark key="]" line="184" column="0" />
        <mark key="." line="184" column="0" />
      </file>
      <file name="/Python Console" timestamp="1539122890002">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/map/map_base.py" timestamp="1539071427306">
        <mark key="[" line="33" column="20" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/map/binary_search_tree.py" timestamp="1539071074438">
        <mark key="[" line="23" column="0" />
      </file>
      <file name="/a.dummy" timestamp="1539165751027">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/circular_positional_list.py" timestamp="1539247477099">
        <mark key="[" line="70" column="8" />
        <mark key="]" line="70" column="8" />
        <mark key="." line="70" column="8" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/tree/binary_tree.py" timestamp="1538985562353">
        <mark key="[" line="78" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/project1/ese_tree_binarySearchTree.py" timestamp="1539095263335">
        <mark key="[" line="184" column="10" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/list/positional_list.py" timestamp="1539244644681">
        <mark key="[" line="83" column="42" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/util.py" timestamp="1538997020032">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/tdp_test/test_circular_positional_list.py" timestamp="1539242621748">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/MyList.py" timestamp="1539068725620">
        <mark key="[" line="40" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="12" column="91" filename="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/tdp_test/ese_tree_binarySearchTree.py" />
    </jumps>
    <registers>
      <register name="1" type="4">
        <text>class Position(PositionalList.Position):
        &quot;&quot;&quot;An abstraction representing the location of a single element.
  
        Note that two position instaces may represent the same inherent
        location in the list.  Therefore, users should always rely on
        syntax 'p == q' rather than 'p is q' when testing equivalence of
        positions.
        &quot;&quot;&quot;

        def __init__(self, container, node):
            &quot;&quot;&quot;Constructor should not be invoked by user.&quot;&quot;&quot;
            super(self).__init__(container ,node)
            

        def element(self):
            &quot;&quot;&quot;Return the element stored at this Position.&quot;&quot;&quot;
            return super(PositionalList.Position ,self).
        
        def __eq__(self, other):
            &quot;&quot;&quot;Return True if other is a Position representing the same location.&quot;&quot;&quot;
            return super(Position ,self).

        def __ne__(self, other):
            &quot;&quot;&quot;Return True if other does not represent the same location.&quot;&quot;&quot;
            return not (self == other)  # opposite of __eq__</text>
      </register>
      <register name="&quot;" type="4">
        <text>&quot;&quot;&quot;Inserisce l'elemento e in testa alla lista e restituisce la Position del nuovo elemento</text>
      </register>
      <register name="2" type="4">
        <text>self._container = container
            self._node = node</text>
      </register>
      <register name="3" type="4">
        <text encoding="base64">CgoK</text>
      </register>
      <register name="4" type="4">
        <text>self._header._prev._next = new_node
            self._header._prev = new_node
            self._header._prev._next = new_node
            self._header._prev = new_node</text>
      </register>
      <register name="5" type="4">
        <text>&quot;&quot;&quot;
        if self.is_empty():
            self._header = self._Node(e, self._header, self._header)
            # riaggiorno i puntatori di header siccome prima di istanziare la classe questi puntavano a none mentre io
            # voglio che ora puntino al nodo aggiornato di header
            self._update_header(self._header,self._header)
            self._size = 1
            return self._make_position(self._header)
        else:
            node = super()._insert_between(e, self._header._prev, self._header)
            print(&quot;QQQQQQQQQQQQQQQQQQQQQQ&quot;,self._header._element)
            self._update_header(node)
            return self._make_position(node)
        
        self._header._next = self._header
        if self.is_empty():
            self._header = self._Node(e, self._header,self._header)
            self._size = 1
        else:
            self._header = super()._insert_between(e,self._header._prev,self._header)
            self._size += 1
            self._header._prev = self._header
            
        return self._make_position(self._header)</text>
      </register>
      <register name="6" type="4">
        <text>if cursor.element() == e:
                return cursor</text>
      </register>
      <register name="7" type="4">
        <text encoding="base64">CgogICAgZGVmIGFkZF9hZnRlcihzZWxmLCBwLCBlKToKICAgICAgICAiIiJJbnNlcmlzY2UgdW4gbnVvdm8oZWxlbWVudG8gZSkgZG9wbyBkZWwgbm9kbyBuZWxsYShQb3NpdGlvbiBwKSBlIHJlc3RpdHVpc2NlIGxhIHBvc2l0aW9uCiAgICAgICAgICAgICAgICBkZWwgbnVvdm8gZWxlbWVudG8gIiIi</text>
      </register>
      <register name="8" type="4">
        <text encoding="base64">CiAgICAgICAgcDIgPSBzZWxmLl9tYWtlX3Bvc2l0aW9uKG5vZGUpCiAgICAgICAgbmV3bm9kZSA9IHNlbGYuX2luc2VydF9iZXR3ZWVuKGUscDIuX25vZGUuX3ByZXYscDIp</text>
      </register>
      <register name="9" type="4">
        <text>p2 = self._make_position(node)
        newnode = self._insert_between(e,p2,p2._node._next)</text>
      </register>
      <register name="-" type="4">
        <text>&quot;&quot;&quot;Inserisce l'elemento e in testa alla lista e restituisce la Position del nuovo elemento</text>
      </register>
    </registers>
    <search>
      <last-dir>0</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search />
      <history-cmd />
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>