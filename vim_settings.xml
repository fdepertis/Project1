<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/tree/tree.py" timestamp="1538903064336">
        <mark key="[" line="115" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/tree/linked_binary_tree.py" timestamp="1539097766263">
        <mark key="[" line="35" column="24" />
        <mark key="]" line="110" column="30" />
        <mark key="^" line="110" column="30" />
        <mark key="." line="110" column="30" />
      </file>
      <file name="/Dummy.txt" timestamp="1539275193781">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/tdp_test/ese_tree_binarySearchTree.py" timestamp="1539071102893">
        <mark key="'" line="12" column="91" />
        <mark key="[" line="184" column="0" />
        <mark key="]" line="184" column="0" />
        <mark key="." line="184" column="0" />
      </file>
      <file name="/Python Console" timestamp="1539955521376">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/project1/score_board.py" timestamp="1539854461625">
        <mark key="[" line="97" column="8" />
        <mark key="]" line="97" column="8" />
        <mark key="." line="97" column="8" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/map/map_base.py" timestamp="1539071427306">
        <mark key="[" line="33" column="20" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/queue/array_queue.py" timestamp="1539674679896">
        <mark key="[" line="7" column="7" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/list/doubly_linked_base.py" timestamp="1540033063756" />
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/map/binary_search_tree.py" timestamp="1539071074438">
        <mark key="[" line="23" column="0" />
      </file>
      <file name="/a.dummy" timestamp="1539165751027">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/circular_positional_list.py" timestamp="1539274913038">
        <mark key="[" line="151" column="3" />
        <mark key="]" line="151" column="3" />
        <mark key="." line="151" column="3" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/project1/verifica.py" timestamp="1540048957535">
        <mark key="[" line="407" column="16" />
        <mark key="]" line="407" column="16" />
        <mark key="." line="407" column="16" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/tree/binary_tree.py" timestamp="1538985562353">
        <mark key="[" line="78" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/ecercise.py" timestamp="1539273101907">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/project1/ese_tree_binarySearchTree.py" timestamp="1539095263335">
        <mark key="[" line="184" column="10" />
      </file>
      <file name="$USER_HOME$/.PyCharmCE2018.2/system/python_stubs/1845667114/builtins.py" timestamp="1540033022759">
        <mark key="[" line="256" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/list/positional_list.py" timestamp="1539767103996">
        <mark key="[" line="60" column="14" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/project1/circular_positional_list.py" timestamp="1540029838280">
        <mark key="[" line="17" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/test_circular_positional_list.py" timestamp="1539282243770">
        <mark key="[" line="19" column="40" />
        <mark key="]" line="48" column="4" />
        <mark key="." line="48" column="4" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/util.py" timestamp="1538997020032">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/project1/reverse.py" timestamp="1539259716981">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/tdp_test/test_circular_positional_list.py" timestamp="1539242621748">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/MyList.py" timestamp="1539068725620">
        <mark key="[" line="40" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="12" column="91" filename="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/tdp_test/ese_tree_binarySearchTree.py" />
    </jumps>
    <registers>
      <register name="1" type="4">
        <text>risp = 1
                while risp == 1:
                    insert = input(&quot;Inserisci il valore :\n&quot;)
                    print(&quot;Lista prima dell'inserimento: &quot;, str(l_1))
                    l_1.add_first(int(insert))
                    print(&quot;Lista dopo l'inserimento: &quot;, str(l_1))
                    while True:
                        risp = int(input(&quot;Vuole inserire un altro elemento?(1-yes or 2-no):\n&quot;))
                        if risp == 2 or risp == 1:
                            break
                        else:
                            print(&quot;Scelta errata, ripeta&quot;)</text>
      </register>
      <register name="&quot;" type="4">
        <text>risp = 1
                while risp == 1:
                    insert = input(&quot;Inserisci il valore :\n&quot;)
                    print(&quot;Lista prima dell'inserimento: &quot;, str(l_1))
                    l_1.add_first(int(insert))
                    print(&quot;Lista dopo l'inserimento: &quot;, str(l_1))
                    while True:
                        risp = int(input(&quot;Vuole inserire un altro elemento?(1-yes or 2-no):\n&quot;))
                        if risp == 2 or risp == 1:
                            break
                        else:
                            print(&quot;Scelta errata, ripeta&quot;)</text>
      </register>
      <register name="2" type="4">
        <text>while exit == 0:
                    print(&quot;-----------------------------------------------------&quot;)
                    print(&quot;\nTest Circular Positional List\n&quot;)
                    print(&quot;1-Visualizza gli elementi della lista [print(str(list))]\n&quot;)
                    print(&quot;2-Add di due liste [x + y]\n&quot;)
                    print(&quot;3-Verifica se una position Ã¨ presente nella lista [ p in x]\n&quot;)
                    print(&quot;4-Restituisce l'elemento contenuto nella position p [ x[p] ]\n&quot;)
                    print(&quot;5-Restituisci il numero di elementi di x  [len(x)]\n&quot;)
                    print(&quot;6-Sostituisci l'elemento di p con e [x[p] = e]\n&quot;)
                    print(&quot;7-Rimuove l'elemento nella position p invalidando la position [del p]\n&quot;)
                    print(&quot;8-Generatore degli elementi [__iter__]\n&quot;)
                    print(&quot;9-Ritorna al passo precedente\n&quot;)
                    print(&quot;10-Termina test\n&quot;)
                    print(&quot;-----------------------------------------------------&quot;)
                    x = input(&quot;Scegli una delle opzioni:\n&quot;)
                    print(&quot;-----------------------------------------------------&quot;)
                    if int(x) == 1:
                        break
                    elif int(x) == 2:
                        break
                    elif int(x) == 3:
                        break
                    elif int(x) == 4:
                        break
                    elif int(x) == 5:
                        break
                    elif int(x) == 6:
                        break
                    elif int(x) == 7:
                        break
                    elif int(x) == 8:
                        break
                    elif int(x) == 9:
                        break
                    elif int(x) == 10:
                        exit = 1
                    else:
                        print(&quot;Scelta errata, ripeta&quot;)</text>
      </register>
      <register name="3" type="4">
        <text encoding="base64">ICAgIAogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSByID09IDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ID0gaW5wdXQoIkluc2VyaXNjaSBpbCB2YWxvcmUgZGEgYWdnaXVuZ2VyZSBpbiB0ZXN0YTpcbiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiTGlzdGEgcHJpbWEgZGVsbCdpbnNlcmltZW50bzogIiwgc3RyKGxfMSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsXzEuYWRkX2ZpcnN0KGludChpbnNlcnQpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkxpc3RhIGRvcG8gbCdpbnNlcmltZW50bzogIiwgc3RyKGxfMSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg</text>
      </register>
      <register name="4" type="4">
        <text>while True:
                                risp = int(input(&quot;Vuole inserire un altro elemento?(1-yes or 2-no):\n&quot;))
                                if risp == 2 or risp == 1:
                                    break
                                else:
                                    print(&quot;Scelta errata, ripeta&quot;)</text>
      </register>
      <register name="5" type="4">
        <text>elif int(x) == 26:
                        break</text>
      </register>
      <register name="6" type="4">
        <text encoding="base64">CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxfMS5pc19lbXB0eSgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkxhIGxpc3RhIMOoIHZ1b3RhIikKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJMYSBsaXN0YSBub24gw6ggdnVvdGEiKQ==</text>
      </register>
      <register name="7" type="4">
        <text encoding="base64">CiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaCA9IGlucHV0KCJEaSBxdWFsZSBlbGVtZW50byB2dW9sZSBvdHRlbmVyZSBpbCBzdWNjZXNzb3JlOlxuIikKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIklsIHN1Y2Nlc3NvcmUgZGkgIiArIHNlYXJjaCArICLDqDogIiArIHN0cihsXzEuYWZ0ZXIobF8xLmZpbmQoaW50KHNlYXJjaCkpKSkp</text>
      </register>
      <register name="8" type="4">
        <text>search = input(&quot;Di quale elemento vuole ottenere il predecessore:\n&quot;)
                        p</text>
      </register>
      <register name="9" type="4">
        <text>elif int(x) == 9:
                        risp = 1
                        while risp == 1:
                            insert = input(&quot;Inserisci il valore da aggiungere in coda:\n&quot;)
                            print(&quot;Lista prima dell'inserimento: &quot;, str(l_1))
                            l_1.add_last(int(insert))
                            print(&quot;Lista dopo l'inserimento: &quot;, str(l_1))
                            while True:
                                risp = int(input(&quot;Vuole inserire un altro elemento?(1-yes or 2-no):\n&quot;))
                                if risp == 2 or risp == 1:
                                    break
                                else:
                                    print(&quot;Scelta errata, ripeta&quot;)
                    elif int(x) == 10:
                        risp = 1
                        while risp == 1:
                            befor = input(&quot;Di chi prima vuole inserire un valore:\n&quot;)
                            insert = input(&quot;Inserisci il valore da aggiungere prima di &quot; + befor + &quot;:\n&quot;)
                            print(&quot;Lista prima dell'inserimento: &quot;, str(l_1))
                            l_1.add_before(l_1.find(int(befor)), int(insert))
                            print(&quot;Lista dopo l'inserimento: &quot;, str(l_1))
                            while True:
                                risp = int(input(&quot;Vuole inserire un altro elemento?(1-yes or 2-no):\n&quot;))
                                if risp == 2 or risp == 1:
                                    break
                                else:
                                    print(&quot;Scelta errata, ripeta&quot;)
                    elif int(x) == 11:
                        risp = 1
                        while risp == 1:
                            befor = input(&quot;Di chi dopo vuole inserire un valore:\n&quot;)
                            insert = input(&quot;Inserisci il valore da aggiungere dopo &quot; + befor + &quot;:\n&quot;)
                            print(&quot;Lista prima dell'inserimento: &quot;, str(l_1))
                            l_1.add_after(l_1.find(int(befor)), int(insert))
                            print(&quot;Lista dopo l'inserimento: &quot;, str(l_1))
                            while True:
                                risp = int(input(&quot;Vuole inserire un altro elemento?(1-yes or 2-no):\n&quot;))
                                if risp == 2 or risp == 1:
                                    break
                                else:
                                    print(&quot;Scelta errata, ripeta&quot;)
                    elif int(x) == 12:
                        risp = 1
                        while risp == 1:
                            search = input(&quot;Quale elemento vuole cercare:\n&quot;)
                            print(&quot;L'elemento &quot; + str(l_1.find(int(search)).element()) + &quot;Ã¨ presente e la sua position Ã¨: &quot; + str(l_1.find(int(search))) + &quot;\n&quot;)
                            while True:
                                risp = int(input(&quot;Vuole cercare un altro elemento?(1-yes or 2-no):\n&quot;))
                                if risp == 2 or risp == 1:
                                    break
                                else:
                                    print(&quot;Scelta errata, ripeta&quot;)
                    elif int(x) == 13:
                        risp = 1
                        while risp == 1:
                            p = input(&quot;Quale elemento vuole aggiornare:\n&quot;)
                            e = input(&quot;Qual'e' l'elemento che vuole inserire:\n&quot;)
                            print(&quot;Lista prima dell'aggiornamento: &quot;, str(l_1))
                            print(&quot;\nL'elemento &quot;+ str(l_1.replace(l_1.find(int(p)), int(e))) + &quot;Ã¨ stato aggiornato al nuovo valore\n&quot;)
                            print(&quot;Lista dopo dell'aggiornamento: &quot;, str(l_1))
                            while True:
                                risp = int(input(&quot;Vuole aggiornare un altro elemento?(1-yes or 2-no):\n&quot;))
                                if risp == 2 or risp == 1:
                                    break
                                else:
                                    print(&quot;Scelta errata, ripeta&quot;)
                    elif int(x) == 14:
                        risp = 1
                        while risp == 1:
                            e = input(&quot;Quale elemento vuole eliminare:\n&quot;)
                            print(&quot;Lista prima dell'eliminazione: &quot;, str(l_1))
                            print(&quot;\nL'elemento &quot;+ str(l_1.delete(l_1.find(int(e)))) + &quot;Ã¨ stato eliminato\n&quot;)
                            print(&quot;Lista dopo dell'aggiornamento: &quot;, str(l_1))
                            while True:
                                risp = int(input(&quot;Vuole eliminare un altro elemento?(1-yes or 2-no):\n&quot;))
                                if risp == 2 or risp == 1:
                                    break
                                else:
                                    print(&quot;Scelta errata, ripeta&quot;)

                    elif int(x) == 15:
                        print(&quot;Lista prima della pulizia: &quot;, str(l_1))
                        l_1.clear()
                        print(&quot;Lista dopo la pulizia: &quot;, str(l_1))
                    elif int(x) == 16:
                        counter = input(&quot;Di quale elemento vuole trovare il numero di occorrenze nella lista:\n&quot;)
                        print(&quot;L'elemento Ã¨ presente &quot; + str(l_1.count(int(counter))) + &quot; volte nella lista&quot;)
                    elif int(x) == 17:
                        print(&quot;Lista prima dell'inversione: &quot;, str(l_1))
                        l_1.reverse()
                        print(&quot;Lista dopo l'inversione: &quot;, str(l_1))
                    elif int(x) == 18:
                        copy = l_1.copy()
                        print(&quot;Lista: &quot;,str(l_1))
                        print(&quot;Copia della lista: &quot;,str(copy))
                        print(&quot;\nMINI TEST sulla correttezza della copia:&quot;)
                        print(&quot;ELiminerÃ² il primo elemento della copia della lista &quot;)
                        print(&quot;per verificare che una semplice modifica sulla copia &quot;)
                        print(&quot;della lista non apporta modifiche sulla lista di cui \n&quot;+&quot;si Ã¨ effettuati la copia &quot;)
                        copy.delete(copy.first())
                        print(&quot;Lista di cui si Ã¨ effettuata una copia: &quot;, str(l_1))
                        print(&quot;Copia della lista dopo la modifica: &quot;, str(copy))</text>
      </register>
      <register name="-" type="4">
        <text>print(&quot;Il primo elemento della lista Ã¨: &quot; + str(l_1.first().element()))</text>
      </register>
    </registers>
    <search>
      <last-dir>0</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search />
      <history-cmd />
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>