<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/tree/tree.py" timestamp="1538903064336">
        <mark key="[" line="115" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/tree/linked_binary_tree.py" timestamp="1539097766263">
        <mark key="[" line="35" column="24" />
        <mark key="]" line="110" column="30" />
        <mark key="^" line="110" column="30" />
        <mark key="." line="110" column="30" />
      </file>
      <file name="/Dummy.txt" timestamp="1539275193781">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/tdp_test/ese_tree_binarySearchTree.py" timestamp="1539071102893">
        <mark key="'" line="12" column="91" />
        <mark key="[" line="184" column="0" />
        <mark key="]" line="184" column="0" />
        <mark key="." line="184" column="0" />
      </file>
      <file name="/Python Console" timestamp="1539955521376">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/project1/score_board.py" timestamp="1539854461625">
        <mark key="[" line="97" column="8" />
        <mark key="]" line="97" column="8" />
        <mark key="." line="97" column="8" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/map/map_base.py" timestamp="1539071427306">
        <mark key="[" line="33" column="20" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/queue/array_queue.py" timestamp="1539674679896">
        <mark key="[" line="7" column="7" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/map/binary_search_tree.py" timestamp="1539071074438">
        <mark key="[" line="23" column="0" />
      </file>
      <file name="/a.dummy" timestamp="1539165751027">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/circular_positional_list.py" timestamp="1539274913038">
        <mark key="[" line="151" column="3" />
        <mark key="]" line="151" column="3" />
        <mark key="." line="151" column="3" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/project1/verifica.py" timestamp="1540029439040">
        <mark key="[" line="320" column="28" />
        <mark key="]" line="320" column="28" />
        <mark key="." line="320" column="28" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/tree/binary_tree.py" timestamp="1538985562353">
        <mark key="[" line="78" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/ecercise.py" timestamp="1539273101907">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/project1/ese_tree_binarySearchTree.py" timestamp="1539095263335">
        <mark key="[" line="184" column="10" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tecniche di Programmazione/TdP_collections/TdP_collections/list/positional_list.py" timestamp="1539767103996">
        <mark key="[" line="60" column="14" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/test_circular_positional_list.py" timestamp="1539282243770">
        <mark key="[" line="19" column="40" />
        <mark key="]" line="48" column="4" />
        <mark key="." line="48" column="4" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/util.py" timestamp="1538997020032">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/project1/reverse.py" timestamp="1539259716981">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/tdp_test/test_circular_positional_list.py" timestamp="1539242621748">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/MyList.py" timestamp="1539068725620">
        <mark key="[" line="40" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="12" column="91" filename="$USER_HOME$/Documenti/Magistrale/TDP/Tdp_repository/venv/tdp_test/ese_tree_binarySearchTree.py" />
    </jumps>
    <registers>
      <register name="1" type="4">
        <text>search = input(&quot;Quale elemento vuole cercare:\n&quot;)
                        print(&quot;L'elemento &quot; + str(l_1.find(int(search)).element()) + &quot;è presente e la sua position è: &quot; + str(l_1.find(int(search))) + &quot;\n&quot;)
                    e</text>
      </register>
      <register name="&quot;" type="4">
        <text>print(str(l_1))</text>
      </register>
      <register name="2" type="4">
        <text encoding="base64">CiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBpbnB1dCgiUXVhbGUgZWxlbWVudG8gdnVvbGUgYWdnaW9ybmFyZTpcbiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gaW5wdXQoIlF1YWwnZScgbCdlbGVtZW50byBjaGUgdnVvbGUgaW5zZXJpcmU6XG4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkxpc3RhIHByaW1hIGRlbGwnYWdnaW9ybmFtZW50bzpcbiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChzdHIobF8xKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJcbkwnZWxlbWVudG8gIisgc3RyKGxfMS5yZXBsYWNlKGxfMS5maW5kKGludChwKSksIGludChlKSkpICsgIsOoIHN0YXRvIGFnZ2lvcm5hdG8gYWwgbnVvdm8gdmFsb3JlXG4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkxpc3RhIGRvcG8gZGVsbCdhZ2dpb3JuYW1lbnRvOlxuIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KHN0cihsXzEpKQogICAgICAgICAgICAgICAgICAgICAgICAgIA==</text>
      </register>
      <register name="3" type="4">
        <text encoding="base64">CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIik=</text>
      </register>
      <register name="4" type="4">
        <text>while True:
                    risp=int(input(&quot;Desidera creare uno Scoreboard di una opportuna dimensione?(1-yes or 2-no):\n&quot;))
                    if risp == 1:
                        dim = input(&quot;Inserisca la dimensione che desidera impostare:\n&quot;)
                        sc_1 = ScoreBoard(int(dim))
                        break
                    elif risp == 2:
                        print(&quot;ScoreBoard creato di dimensione 10&quot;)
                        break
                    else:
                        print(&quot;Scelta errata, ripeta&quot;)</text>
      </register>
      <register name="5" type="4">
        <text>risp = 1
                        while risp == 1:
                            score = float(input(&quot;Inserisca lo score totalizzato:\n&quot;))
                            name = input(&quot;Inserisca il nome del player che ha totalizzato lo score:\n&quot;)
                            print(&quot;Inserisca la data in cui è stato totalizzato lo score&quot;)
                            Y = int(input(&quot;Anno:\n&quot;))
                            M = int(input(&quot;Mese:\n&quot;))
                            D = int(input(&quot;Giorno:\n&quot;))
                            sc_1.insert(ScoreBoard.Score(name, score, date(Y, M, D)))
                            while True:
                                risp = int(input(&quot;Vuole inserire un altro score?(1-yes or 2-no):\n&quot;))
                                if risp == 2 or risp == 1:
                                    break
                                else:
                                    print(&quot;Scelta errata, ripeta&quot;)</text>
      </register>
      <register name="6" type="4">
        <text>risp = 1
                        while risp == 1:
                            score = float(input(&quot;Inserisca lo score totalizzato:\n&quot;))
                            name = input(&quot;Inserisca il nome del player che ha totalizzato lo score:\n&quot;)
                            print(&quot;Inserisca la data in cui è stato totalizzato lo score&quot;)
                            Y = int(input(&quot;Anno:\n&quot;))
                            M = int(input(&quot;Mese:\n&quot;))
                            D = int(input(&quot;Giorno:\n&quot;))
                            sc_1.insert(ScoreBoard.Score(name, score, date(Y, M, D)))
                            while True:
                                risp = int(input(&quot;Vuole inserire un altro score?(1-yes or 2-no):\n&quot;))
                                if risp == 2 or risp == 1:
                                    break
                                else:
                                    print(&quot;Scelta errata, ripeta&quot;)</text>
      </register>
      <register name="7" type="4">
        <text>if risp == 1:
                                    dim = input(&quot;Inserisca la dimensione che desidera impostare:\n&quot;)
                                    sc_1 = ScoreBoard(int(dim))
                                    break</text>
      </register>
      <register name="8" type="4">
        <text>while exit == 0:
                    print(&quot;-----------------------------------------------------&quot;)
                    print(&quot;\nTest ScoreBoard(&quot; + str(dim) + &quot; elementi)\n&quot;)
                    print(&quot;1-Ottieni la dimensione dello score\n&quot;)
                    print(&quot;2-Ottieni il numero di elementi presenti\n&quot;)
                    print(&quot;3-Verifica se la lista è vuota\n&quot;)
                    print(&quot;4-Inserisci uno score nello ScoreBoard\n&quot;)
                    print(&quot;5-Restituisci gli x migliori Score dello ScoreBoard\n&quot;)
                    print(&quot;6-Restituisci gli x peggiori Score dello ScoreBoard\n&quot;)
                    print(&quot;7-Ritorna al passo precedente\n&quot;)
                    print(&quot;8-Termina test\n&quot;)
                    print(&quot;-----------------------------------------------------&quot;)
                    x = input(&quot;Scegli una delle opzioni:\n&quot;)
                    print(&quot;-----------------------------------------------------&quot;)
                    if int(x) == 1:
                        print(&quot;La dimensione dello ScoreBoard è: &quot;,len(sc_1))
                    elif int(x) == 2:
                        print(&quot;Il numero di Score presenti nello ScoreBoard è: &quot;,sc_1.size())
                    elif int(x) == 3:
                        if sc_1.is_empty():
                            print(&quot;Lo ScoreBoard è vuoto&quot;)
                        else:
                            print(&quot;Lo ScoreBoard non è vuoto&quot;)
                    elif int(x) == 4:
                        score = float(input(&quot;Inserisci lo score totalizzato:\n&quot;))
                        name = input(&quot;Inserisci il nome del player che ha totalizzato lo score:\n&quot;)
                        print(&quot;Inserisci la data in cui è stato totalizzato lo score&quot;)
                        Y = int(input(&quot;Anno:\n&quot;))
                        M = int(input(&quot;Mese:\n&quot;))
                        D = int(input(&quot;Giorno:\n&quot;))
                        sc_1.insert(ScoreBoard.Score(name, score, date(Y, M, D)))
                    elif int(x) == 5:
                        i = int(input(&quot;Dimmi quanti x migliori risultati vuoi visualizzare:\n&quot;))
                        k = 1
                        for i in sc_1.top(i):
                            print(str(k) + &quot;°  \t&quot; + str(i))
                            k += 1
                    elif int(x) == 6:
                        i = int(input(&quot;Dimmi quanti x peggiori risultati vuoi visualizzare:\n&quot;))
                        k = 1
                        for i in sc_1.last(i):
                            print(str(k) + &quot;°  \t&quot; + str(i))
                            k += 1
                    elif int(x) == 7:
                        break
                    elif int(x) == 8:
                        exit = 1
                    else:
                        print(&quot;Scelta errata, ripeti&quot;)</text>
      </register>
      <register name="9" type="4">
        <text>while exit == 0:
                    print(&quot;-----------------------------------------------------&quot;)
                    print(&quot;\nTest ScoreBoard\n&quot;)
                    print(&quot;1-TTTTTTTTTTTCrea uno ScoreBorad di 10 massimo elementi\n&quot;)
                    print(&quot;2-Crea uno ScoreBoard del numero massimo degli elementi che desideri\n&quot;)
                    print(&quot;3-Ritorna al passo precedente\n&quot;)
                    print(&quot;4-Termina test\n&quot;)
                    print(&quot;-----------------------------------------------------&quot;)
                    x = input(&quot;Scegli 1 or 2 or 3 or 4:\n&quot;)
                    print(&quot;-----------------------------------------------------&quot;)
                    if int(x) == 1:
                        print(&quot;ancora da fare&quot;)
                    elif int(x) == 2:
                        print(&quot;pene&quot;)
                    elif int(x) == 3:
                        break
                    elif int(x) == 4:
                        exit = 1
                    else:
                        print(&quot;Scelta errata, ripeti&quot;)
            elif int(x) == 3:
                break
            elif int(x) == 4:
                exit = 1
            else:
                print(&quot;Scelta errata, ripeti&quot;)
    elif int(x) == 3:
        test_default()
    elif int(x) == 4:
        exit = 1
    else:
        print(&quot;Scelta errata, ripeti&quot;)</text>
      </register>
      <register name="-" type="4">
        <text>print(str(l_1))</text>
      </register>
    </registers>
    <search>
      <last-dir>0</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search />
      <history-cmd />
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>